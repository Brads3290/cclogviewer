package processor

import (
	"github.com/brads3290/cclogviewer/internal/models"
	"strings"
)

// MessageHandler processes specific message types.
type MessageHandler func(*models.ProcessedEntry, map[string]interface{}, models.LogEntry) error

// messageHandlers maps message types to their handlers
var messageHandlers = map[string]MessageHandler{
	TypeUser:      handleUserMessage,
	TypeAssistant: handleAssistantMessage,
}

// processMessage processes a message using the appropriate handler
func processMessage(processed *models.ProcessedEntry, msg map[string]interface{}, entry models.LogEntry) error {
	processed.Role = GetStringValue(msg, "role")

	if handler, ok := messageHandlers[processed.Type]; ok {
		return handler(processed, msg, entry)
	}

	return nil
}

// handleUserMessage processes user messages
func handleUserMessage(processed *models.ProcessedEntry, msg map[string]interface{}, entry models.LogEntry) error {
	processed.Content = ProcessUserMessage(msg)
	processed.IsToolResult = isToolResult(msg)

	checkCaveatMessage(processed)
	checkCommandMessage(processed)
	extractToolResultData(processed, msg)

	return nil
}

// handleAssistantMessage processes assistant messages
func handleAssistantMessage(processed *models.ProcessedEntry, msg map[string]interface{}, entry models.LogEntry) error {
	processed.Content, processed.ToolCalls = ProcessAssistantMessage(msg, entry.CWD)
	return nil
}

// checkCaveatMessage checks if the message is a caveat message
func checkCaveatMessage(processed *models.ProcessedEntry) {
	if strings.HasPrefix(processed.Content, "Caveat: The messages below were generated by the user while running local commands.") {
		processed.IsCaveatMessage = true
	}
}

// checkCommandMessage checks if the message is a command message with XML syntax
func checkCommandMessage(processed *models.ProcessedEntry) {
	hasCommandName := strings.Contains(processed.Content, "<"+TagCommandName+">") &&
		strings.Contains(processed.Content, "</"+TagCommandName+">")

	if hasCommandName {
		processed.IsCommandMessage = true
		processed.CommandName = extractXMLContent(processed.Content, TagCommandName)
		processed.CommandArgs = extractXMLContent(processed.Content, TagCommandArgs)
	}
}

// extractToolResultData extracts tool result error status and ID
func extractToolResultData(processed *models.ProcessedEntry, msg map[string]interface{}) {
	if !processed.IsToolResult {
		return
	}

	content, ok := msg["content"].([]interface{})
	if !ok || len(content) == 0 {
		return
	}

	toolResult, ok := content[0].(map[string]interface{})
	if !ok {
		return
	}

	processed.IsError = GetBoolValue(toolResult, "is_error")
	processed.ToolResultID = GetStringValue(toolResult, "tool_use_id")
}

// TokenProcessor calculates and tracks token usage.
type TokenProcessor struct{}

// NewTokenProcessor creates a new token processor
func NewTokenProcessor() *TokenProcessor {
	return &TokenProcessor{}
}

// ProcessTokens extracts and calculates token counts for an entry
func (tp *TokenProcessor) ProcessTokens(processed *models.ProcessedEntry, msg map[string]interface{}) {
	if usage, ok := msg["usage"].(map[string]interface{}); ok {
		tp.extractUsageTokens(processed, usage)
	} else {
		tp.estimateTokens(processed)
	}
}

// extractUsageTokens extracts token counts from usage field
func (tp *TokenProcessor) extractUsageTokens(processed *models.ProcessedEntry, usage map[string]interface{}) {
	if inputTokens, ok := usage["input_tokens"].(float64); ok {
		processed.InputTokens = int(inputTokens)
	}

	// Always estimate output tokens from content for accuracy
	processed.OutputTokens = EstimateTokens(string(processed.Content))
	processed.TokenCount = processed.OutputTokens

	if cacheReadTokens, ok := usage["cache_read_input_tokens"].(float64); ok {
		processed.CacheReadTokens = int(cacheReadTokens)
	}

	if cacheCreationTokens, ok := usage["cache_creation_input_tokens"].(float64); ok {
		processed.CacheCreationTokens = int(cacheCreationTokens)
	}
}

// estimateTokens estimates token counts when usage data is not available
func (tp *TokenProcessor) estimateTokens(processed *models.ProcessedEntry) {
	processed.TokenCount = EstimateTokens(string(processed.Content))

	// For user messages, the estimated tokens are output tokens
	if processed.Role == RoleUser {
		processed.OutputTokens = processed.TokenCount
	}
}
